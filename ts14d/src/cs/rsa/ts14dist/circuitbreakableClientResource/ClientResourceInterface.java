package cs.rsa.ts14dist.circuitbreakableClientResource;

import java.util.List;

import org.restlet.Request;
import org.restlet.Response;
import org.restlet.Uniform;
import org.restlet.data.ChallengeResponse;
import org.restlet.data.ChallengeScheme;
import org.restlet.data.ClientInfo;
import org.restlet.data.Conditions;
import org.restlet.data.Cookie;
import org.restlet.data.MediaType;
import org.restlet.data.Metadata;
import org.restlet.data.Method;
import org.restlet.data.Parameter;
import org.restlet.data.Protocol;
import org.restlet.data.Range;
import org.restlet.data.Reference;
import org.restlet.data.Status;
import org.restlet.representation.Representation;
import org.restlet.resource.ClientResource;
import org.restlet.resource.ResourceException;
import org.restlet.util.Series;
/**
 * Defines the role as Component in the Decorator pattern. This interface describes the component (ClientResource) 
 * that needs to be extended with functionality. (The CircuitBreaker).<br/> 
 * Defines the interface for org.restlet.resource.ClientResource, since this couldn't be found elsewhere.<br/>
 * It is generated by Eclipse, and allows for decoupling and dependency injection (for testing purpose)<br/>
 * <br/>
 * This is part of a fix/hack to make ClientResource available as an interface. See SimpleClientResource for the second part.<br/>
 * For description of the methods, see the documentation for ClientResource.
 */

public interface ClientResourceInterface {

	public void accept(Metadata metadata, float quality);

	public void accept(Metadata... metadata);

	public Reference addQueryParameter(Parameter parameter);

	public Reference addQueryParameter(String name, String value);

	public Reference addQueryParameters(Iterable<Parameter> parameters);

	public Reference addSegment(String value);

	public Request createRequest();

	public Request createRequest(Request prototype);

	public Representation delete() throws ResourceException;

	public <T> T delete(Class<T> resultClass) throws ResourceException;

	public Representation delete(MediaType mediaType) throws ResourceException;

	public void doError(Status errorStatus);

	public Representation get() throws ResourceException;

	public <T> T get(Class<T> resultClass) throws ResourceException;

	public Representation get(MediaType mediaType) throws ResourceException;

	public String getAttribute(String name);

	public <T> T getChild(Reference relativeRef, Class<? extends T> resourceInterface) throws ResourceException;

	public ClientResource getChild(Reference relativeRef) throws ResourceException;

	public <T> T getChild(String relativeUri, Class<? extends T> resourceInterface) throws ResourceException;

	public ClientResource getChild(String relativeUri) throws ResourceException;

	public int getMaxRedirects();

	public Uniform getNext();

	public Uniform getOnResponse();

	public Uniform getOnSent();

	public ClientResource getParent() throws ResourceException;

	public <T> T getParent(Class<? extends T> resourceInterface) throws ResourceException;

	public int getRetryAttempts();

	public long getRetryDelay();

	public Representation handle();

	public Response handle(Request request);

	public Representation handleInbound(Response response);

	public Response handleOutbound(Request request);

	public boolean hasNext();

	public Representation head() throws ResourceException;

	public Representation head(MediaType mediaType) throws ResourceException;

	public boolean isFollowingRedirects();

	public boolean isRequestEntityBuffering();

	public boolean isResponseEntityBuffering();

	public boolean isRetryOnError();

	public Representation options() throws ResourceException;

	public <T> T options(Class<T> resultClass) throws ResourceException;

	public Representation options(MediaType mediaType) throws ResourceException;

	public <T> T post(Object entity, Class<T> resultClass) throws ResourceException;

	public Representation post(Object entity, MediaType mediaType) throws ResourceException;

	public Representation post(Object entity) throws ResourceException;

	public Representation post(Representation entity) throws ResourceException;

	public <T> T put(Object entity, Class<T> resultClass) throws ResourceException;

	public Representation put(Object entity, MediaType mediaType) throws ResourceException;

	public Representation put(Object entity) throws ResourceException;

	public Representation put(Representation entity) throws ResourceException;

	public void setAttribute(String name, Object value);

	public void setChallengeResponse(ChallengeResponse challengeResponse);

	public void setChallengeResponse(ChallengeScheme scheme, String identifier, String secret);

	public void setClientInfo(ClientInfo clientInfo);

	public void setConditions(Conditions conditions);

	public void setCookies(Series<Cookie> cookies);

	public void setEntityBuffering(boolean entityBuffering);

	public void setFollowingRedirects(boolean followingRedirects);

	public void setHostRef(Reference hostRef);

	public void setHostRef(String hostUri);

	public void setLoggable(boolean loggable);

	public void setMaxRedirects(int maxRedirects);

	public void setMethod(Method method);

	public void setNext(Uniform arg0);

	public void setOnResponse(Uniform onResponseCallback);

	public void setOnSent(Uniform onSentCallback);

	public void setOriginalRef(Reference originalRef);

	public void setProtocol(Protocol protocol);

	public void setProxyChallengeResponse(ChallengeResponse challengeResponse);

	public void setProxyChallengeResponse(ChallengeScheme scheme, String identifier, String secret);

	public void setRanges(List<Range> ranges);

	public void setReference(Reference reference);

	public void setReference(String uri);

	public void setReferrerRef(Reference referrerRef);

	public void setReferrerRef(String referrerUri);

	public void setRequestEntityBuffering(boolean requestEntityBuffering);

	public void setResponseEntityBuffering(boolean responseEntityBuffering);

	public void setRetryAttempts(int retryAttempts);

	public void setRetryDelay(long retryDelay);

	public void setRetryOnError(boolean retryOnError);

	public <T> T wrap(Class<? extends T> resourceInterface);

}